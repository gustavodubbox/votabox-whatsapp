<?php

namespace App\Services\Chatbot;

use App\Models\WhatsAppConversation;
use Illuminate\Support\Facades\Log;

class ConversationManagerService
{
    protected StatefulChatbotService $chatbotService;

    public function __construct(StatefulChatbotService $chatbotService)
    {
        $this->chatbotService = $chatbotService;
    }

    /**
     * Encontra e fecha conversas abertas que estÃ£o inativas hÃ¡ mais de 5 minutos.
     */
    public function closeInactiveConversations(): void
    {
        Log::info('[ConversationManager] Running job to close inactive conversations.');

        // Encontra conversas abertas, geridas pela IA, e que nÃ£o foram atualizadas nos Ãºltimos 5 minutos.
        $inactiveConversations = WhatsAppConversation::where('status', 'open')
            ->where('is_ai_handled', true)
            ->where('updated_at', '<', now()->subMinutes(5))
            ->with('messages') // Carrega as mensagens para evitar mÃºltiplas queries
            ->get();

        if ($inactiveConversations->isEmpty()) {
            Log::info('[ConversationManager] No inactive conversations found.');
            return;
        }

        Log::info('[ConversationManager] Found ' . $inactiveConversations->count() . ' inactive conversations to close.');

        foreach ($inactiveConversations as $conversation) {
            // Verifica se a Ãºltima mensagem foi do bot para evitar fechar logo apÃ³s o utilizador responder.
            $lastMessage = $conversation->messages->last();
            if ($lastMessage && $lastMessage->direction === 'inbound') {
                continue; // Pula esta conversa se a Ãºltima mensagem foi do utilizador.
            }

            // Determina se a resposta deve ser em Ã¡udio
            $respondWithAudio = $this->shouldRespondWithAudio($conversation);
            
            $closingMessages = [
                "Oi! Parece que ficamos um tempinho sem bater papo. Vou fechar o chat por enquanto para manter tudo organizado. Se precisar, Ã© sÃ³ chamar! ðŸ˜Š",
                "OlÃ¡! Notei que deu uma pausa por aqui, entÃ£o vou encerrar a conversa por ora. Quando quiser, Ã© sÃ³ chamar e a gente continua! ðŸ‘‹",
                "E aÃ­! JÃ¡ faz um tempinho sem mensagens, entÃ£o vou pausar esta conversa. Qualquer coisa, Ã© sÃ³ me chamar, tÃ¡? AtÃ© logo! ðŸ˜‰",
                "Oi! Vou encerrar por enquanto para manter a casa em ordem. Se surgir qualquer dÃºvida, manda mensagem e voltamos a falar! âœ¨",
            ];
            
            $closingMessage = $closingMessages[array_rand($closingMessages)];
            
            // Envia a mensagem de encerramento
            $this->chatbotService->sendResponse($conversation, $closingMessage, $respondWithAudio);

            // Fecha a conversa
            $conversation->update(['status' => 'closed']);
            Log::info('[ConversationManager] Closed conversation.', ['conversation_id' => $conversation->id]);
        }
    }

    /**
     * Verifica a Ãºltima mensagem do utilizador para decidir se a resposta deve ser em Ã¡udio.
     */
    private function shouldRespondWithAudio(WhatsAppConversation $conversation): bool
    {
        $lastUserMessage = $conversation->messages()
            ->where('direction', 'inbound')
            ->latest()
            ->first();

        return $lastUserMessage && $lastUserMessage->type === 'audio';
    }
}
